@using SharedLib
@using SharedLib.Models
@using SharedLib.Services

@inject ILogger<LinksPropertiesComponent> _logger
@inject IProjectsRestService _users_projects_refit_service
@inject NavigationManager _navigation_manager

@inherits BlazorBusyComponentBaseModel

@if (LinksData.Any())
{
    <ul class="list-group list-group-flush">
        @foreach (EntryDescriptionModel row in LinksData)
        {
            <li class="list-group-item"><b>#@(row.Id)</b> <a href="/@(GlobalStaticConstants.DOCUMENTS_CONTROLLER_NAME)/@(GlobalStaticConstants.EDIT_ACTION_NAME)/@(row.Id)">@(row.Name)</a> @((MarkupString)row.Description)</li>
        }
    </ul>
}
else
{
    <figure>
        <blockquote class="blockquote">
            <p>Связей нет</p>
        </blockquote>
        <figcaption class="blockquote-footer">
            Ссылок на этот объект нет.
        </figcaption>
    </figure>
}

<ModalWindowComponent @ref="Modal">
    <p>@ModalBodyText</p>
</ModalWindowComponent>


@code {
    [Parameter, EditorRequired]
    public int? OwnerId { get; set; }
    int _old_owner_id;

    [Parameter, EditorRequired]
    public OwnersLinksTypesEnum OwnerType { get; set; }

    private ModalWindowComponent Modal { get; set; }
    private string ModalBodyText { get; set; } = string.Empty;

    IEnumerable<EntryDescriptionModel> LinksData = Enumerable.Empty<EntryDescriptionModel>();

    protected override async Task OnInitializedAsync()
    {
        _navigation_manager.LocationChanged += HandleLocationChanged;
        if (OwnerId.GetValueOrDefault() > 0)
        {
            await ReloadForm(OwnerId.Value);
        }
    }

    public async Task ReloadForm(int id)
    {
        if (id <= 0)
        {
            ModalBodyText = "Идентификатор пользовательского проекта не может быть 0";
            _logger.LogError(ModalBodyText);
            Modal.Open("Ошибка!");
            return;
        }
        _old_owner_id = id;
        IsBusyProgress = true;

        LinksRealTypeResponseModel rest = await _users_projects_refit_service.GetRealTypeLinks(id, OwnerType);
        if (!rest.IsSuccess)
        {
            if (!string.IsNullOrEmpty(rest.Message))
            {
                _logger.LogError(rest.Message);
                ModalBodyText = rest.Message;
                Modal.Open("Ошибка!");
            }
            else
            {
                ModalBodyText = $"Ошибка API: {nameof(_users_projects_refit_service.GetRealTypeLinks)}";
                _logger.LogError(ModalBodyText);
                Modal.Open("Ошибка!");
            }
        }
        else
        {
            LinksData = rest.LinksData ?? Enumerable.Empty<EntryDescriptionModel>();
        }

        IsBusyProgress = false;
        StateHasChanged();
    }

    protected void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (OwnerId.GetValueOrDefault(0) > 0 && _old_owner_id != OwnerId)
        {
            ReloadForm(OwnerId.Value);
        }
    }

    public void Dispose()
    {
        if (_navigation_manager is not null)
            _navigation_manager.LocationChanged -= HandleLocationChanged;
    }
}