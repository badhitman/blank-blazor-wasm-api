@using BlazorWasmApp.Shared.datatable
@using SharedLib
@using SharedLib.Services
@using SharedLib.Models

@inject SessionMarkerLiteModel sessionMarker
@inject ILogger<ReportLogsEnumComponent> logger
@inject ILogsChangesRestService _logs_refit_service

@inherits BlazorBusyComponentBaseModel

<h3>
    Отчёт изменений
    <small class="text-muted">Активность работ над перечислением</small>
</h3>

<DataTableSilentComponent DataProvider="logsDataTable" ButtonAction="SetPageNum" PageNum="@(rest.Pagination.PageNum)" PageSize="@(rest.Pagination.PageSize)" TotalRowsCount="@(rest.Pagination.TotalRowsCount)" />

@code {
    [Parameter]
    public int? EnumId { get; set; }

    private ModalWindowComponent Modal { get; set; }
    private string ModalBodyText { get; set; } = string.Empty;

    LogsPaginationResponseModel rest = new LogsPaginationResponseModel() { Logs = Enumerable.Empty<LogViewModel>(), Pagination = new PaginationResponseModel() { } };

    LogsTableProvider logsDataTable => new LogsTableProvider(rest);

    int PageNum = 1;

    protected override async void OnInitialized()
    {
        if (EnumId.GetValueOrDefault(0) == 0)
        {
            return;
        }
        await ReloadLogs(EnumId.Value);
    }

    public async Task ReloadLogs(int document_id)
    {
        if (document_id <= 0)
        {
            ModalBodyText = "Идентификатор перечисления не может быть 0";
            logger.LogError(ModalBodyText);
            Modal.Open("Ошибка!");
            return;
        }

        IsBusyProgress = true;

        rest = await _logs_refit_service.GetLogsByEnumAsync(new LogsPaginationRequestModel()
            {
                FilterId = document_id,
                PageNum = PageNum,
                PageSize = 10
            });

        IsBusyProgress = false;
        StateHasChanged();
    }

    public void SetPageNum(int page_num)
    {
        PageNum = page_num;
        ReloadLogs(EnumId.Value);
    }
}
