@using BlazorWasmApp.Shared.design
@using BlazorWasmApp.Shared.design.documents
@using BlazorWasmApp.Shared.tabs
@using Microsoft.AspNetCore.Authorization
@using SharedLib
@using SharedLib.Models
@using SharedLib.Services

@inject SessionMarkerLiteModel _session_marker
@inject IDocumentsGridsDesignRestService _documents_grids_design_refit_service
@inject ILogger<DocumentGridsManageComponent> _logger

@inherits BlazorBusyComponentBaseModel

@attribute [Authorize]

@if (IsBusyProgress == true)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Загрузка...</span>
        </div>
    </div>
}
else
{
    <div class="accordion accordion-flush" id="accordionFlushExample">
        @foreach (RealTypeModel row in Grids)
        {
            <div class="accordion-item">
                <h2 class="accordion-header" id="flush-heading_@($"{row.Id}")">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapse_@($"{row.Id}")" aria-expanded="false" aria-controls="flush-collapse_@($"{row.Id}")">
                        @(row.Name) #@($"{row.Id}")
                    </button>
                </h2>
                <div id="flush-collapse_@($"{row.Id}")" class="accordion-collapse collapse" aria-labelledby="flush-heading_@($"{row.Id}")" data-bs-parent="#accordionFlushExample">
                    <div class="accordion-body">@((MarkupString)row.Description)</div>
                </div>
            </div>
        }
    </div>

    <ModalWindowComponent @ref="Modal">
        <p>@ModalBodyText</p>
    </ModalWindowComponent>
}

@code {
    [Parameter, EditorRequired]
    public int Id { get; set; }

    private ModalWindowComponent Modal { get; set; }
    private string ModalBodyText { get; set; } = string.Empty;

    IEnumerable<RealTypeModel> Grids = Enumerable.Empty<RealTypeModel>();

    protected override async Task OnInitializedAsync()
    {
        if (Id <= 0)
        {
            return;
        }
        await ReloadForm(Id);
    }

    private async Task HandleValidSubmitEnumAsync()
    {
        if (Id > 0)
        {
            //ResponseBaseCurrentProjectModel rest = await _documents_grids_design_refit_service.UpdateDocumentAsync((IdNameDescriptionSimpleRealTypeModel)docomentObject);
            //ModalBodyText = rest.Message;
            //Modal.Open(rest.IsSuccess ? "Сохранено" : "Ошибка!");
        }
        else
        {
            //IdResponseOwnedModel rest = await _documents_grids_design_refit_service.AddDocumentAsync((NameDescriptionSimpleRealTypeModel)docomentObject);
            //if (rest.IsSuccess)
            //{
            //    docomentObject.Project = new ProjectModelDB(rest.CurrentOwnerObject);
            //    _navigation_manager.NavigateTo($"/{GlobalStaticConstants.DOCUMENTS_CONTROLLER_NAME}/{GlobalStaticConstants.EDIT_ACTION_NAME}/{rest.Id}", false);
            //}
            //else
            //{
            //    ModalBodyText = rest.Message;
            //    Modal.Open("Ошибка!");
            //}
        }
    }

    public async Task ReloadForm(int id)
    {
        if (id <= 0)
        {
            ModalBodyText = "Идентификатор документа не может быть 0";
            _logger.LogError(ModalBodyText);
            Modal.Open("Ошибка!");
            return;
        }

        IsBusyProgress = true;

        RealTypeRowsResponseModel rest = await _documents_grids_design_refit_service.GetGridsAsync(id);
        if (!rest.IsSuccess)
        {
            if (!string.IsNullOrEmpty(rest.Message))
            {
                _logger.LogError(rest.Message);
                ModalBodyText = rest.Message;
                Modal.Open("Ошибка!");
            }
            else
            {
                ModalBodyText = $"Ошибка API: {nameof(_documents_grids_design_refit_service.GetGridsAsync)}";
                _logger.LogError(ModalBodyText);
                Modal.Open("Ошибка!");
            }
        }
        else
        {
            Grids = rest.Rows;
        }

        IsBusyProgress = false;
        StateHasChanged();
    }
}