@using BlazorWasmApp.Shared.design
@using BlazorWasmApp.Shared.design.documents
@using BlazorWasmApp.Shared.tabs
@using Microsoft.AspNetCore.Authorization
@using SharedLib
@using SharedLib.Models
@using SharedLib.Services

@inject SessionMarkerLiteModel _session_marker
@inject IDocumentsGridsDesignRestService _documents_grids_design_refit_service
@inject ILogger<DocumentGridsManageComponent> _logger

@inherits BlazorBusyComponentBaseModel

@attribute [Authorize]

@if (IsBusyProgress == true)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Загрузка...</span>
        </div>
    </div>
}
else
{
    <style>
        #create-new-grid > .validation-errors {
            margin-left: 25px;
        }

        button.is-deleted {
            text-decoration: line-through;
        }
    </style>
    <EditForm id="create-new-grid" autocomplete="off" Model="@create_grid" OnValidSubmit="@HandleValidSubmitCreateGridAsync" class="row row-cols-lg-auto g-3 align-items-center">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="input-group">
            <span class="input-group-text">Новая таб.часть</span>
            <input type="text" @bind="create_grid.Name" @bind:event="oninput" aria-label="Название" placeholder="Название" title="Наименование табличной части в интерфейсе" class="form-control">
            <input type="text" @bind="create_grid.SystemCodeName" @bind:event="oninput" aria-label="Системное кодовое имя" placeholder="Системное/кодовое имя" title="Имя класса C#" class="form-control">
            <button class="btn btn-outline-secondary" type="submit" id="button-addon2">Создать</button>
        </div>
    </EditForm>
    <br />
    <div class="accordion" id="accordionFlushExample">
        @foreach (RealTypeModel row in Grids)
        {
            <div class="accordion-item@(row.Id == current_grid.Id ? " border border-primary" : "")">
                <h2 class="accordion-header" id="flush-heading_@($"{row.Id}")">
                    <button @onclick="() => SetCurrentGrid(row)" class="accordion-button@(row.Id == current_grid.Id ? "" : " collapsed") @(row.IsDeleted ? " is-deleted" : "")" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapse_@($"{row.Id}")" aria-expanded="false" aria-controls="flush-collapse_@($"{row.Id}")">
                        @(row.Name) #@($"{row.Id}")
                    </button>
                </h2>
                @if (row.Id == current_grid.Id)
                {
                    <div class="card border-0 bg-light">
                        <div class="card-body">
                            <div id="flush-collapse_@($"{row.Id}")" class="accordion-collapse collapse show" aria-labelledby="flush-heading_@($"{row.Id}")" data-bs-parent="#accordionFlushExample">
                                <div class="mb-3">
                                    <label for="currentInputName" class="form-label">Наименование табличной части</label>
                                    <input @bind="current_grid.Name" @bind:event="oninput" type="text" class="form-control" id="currentInputName" aria-describedby="nameHelp" />
                                    <div id="nameHelp" class="form-text">Заголовок табличной части в форме и комментарий к классу/class.</div>
                                </div>
                                <div class="mb-3">
                                    <label for="currentInputSystemCode" class="form-label">Кодовое имя</label>
                                    <input @bind="current_grid.SystemCodeName" @bind:event="oninput" type="text" class="form-control" id="currentInputSystemCode" aria-describedby="systemCodeHelp" />
                                    <div id="systemCodeHelp" class="form-text">Системное имя типа данных C#.</div>
                                </div>
                                <div class="mb-3">
                                    <label for="currentInputAbout" class="form-label">Справочная информация</label>
                                    <textarea @bind="current_grid.Description" @bind:event="oninput" class="form-control" id="currentInputAbout" rows="5" placeholder="Комментарий для табличной части" aria-describedby="aboutCurrentHelp" />
                                    <div id="aboutCurrentHelp" class="form-text">Описание поля (подсказка). Избегайте использование HTML в этом описании.</div>
                                </div>
                            </div>

                            <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                                <div class="btn-toolbar mb-3" role="toolbar" aria-label="Toolbar with button groups">
                                    <div class="btn-group me-2" role="group" aria-label="First group">
                                        <button type="button" class="btn btn-outline-secondary" disabled="@(!IsEdited)" @onclick="HandleValidSaveAsync">Записать</button>
                                        <button type="button" class="btn btn-outline-secondary" disabled="@(!IsEdited)" @onclick="HandleResetCurrentGrid">Отмена</button>
                                        @if (row.IsDeleted)
                                        {
                                            <button type="button" class="btn btn-outline-secondary" disabled="@(IsEdited)" @onclick="HandleToggleMarkDeleteAsync">Отменить удаление</button>
                                            <button type="button" class="btn btn-outline-secondary" disabled="@(IsEdited)" @onclick="HandleRemoveAsync">Удалить окончательно</button>
                                        }
                                        else
                                        {
                                            <button type="button" class="btn btn-outline-secondary" disabled="@(IsEdited)" @onclick="HandleToggleMarkDeleteAsync">Удалить</button>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
    <ModalWindowComponent @ref="Modal">
        <p>@ModalBodyText</p>
    </ModalWindowComponent>
}

@code {
    [Parameter, EditorRequired]
    public int Id { get; set; }

    private ModalWindowComponent Modal { get; set; }
    private string ModalBodyText { get; set; } = string.Empty;

    IEnumerable<RealTypeModel> Grids = Enumerable.Empty<RealTypeModel>();

    RealTypeModel? _control_current_grid = new();
    RealTypeModel? current_grid = new();

    bool IsEdited
    {
        get
        {
            return _control_current_grid.Description != current_grid.Description || _control_current_grid.Name != current_grid.Name || _control_current_grid.SystemCodeName != current_grid.SystemCodeName || _control_current_grid.Id != current_grid.Id;
        }
    }

    SystemDocumentsNamedSimpleModel create_grid = new();

    protected override async Task OnInitializedAsync()
    {
        if (Id <= 0)
        {
            return;
        }
        await ReloadForm(Id);
    }

    void HandleResetCurrentGrid()
    {
        current_grid.Description = _control_current_grid.Description;
        current_grid.IsDeleted = _control_current_grid.IsDeleted;
        current_grid.Name = _control_current_grid.Name;
        current_grid.SystemCodeName = _control_current_grid.SystemCodeName;
    }

    void SetCurrentGrid(RealTypeModel set_current_grid)
    {
        HandleResetCurrentGrid();
        current_grid = set_current_grid;
        _control_current_grid = new()
            {
                Id = current_grid.Id,
                Description = current_grid.Description,
                IsDeleted = current_grid.IsDeleted,
                Name = current_grid.Name,
                SystemCodeName = current_grid.SystemCodeName
            };
    }

    async Task HandleToggleMarkDeleteAsync()
    {
        if (Id <= 0 || current_grid.Id <= 0)
            return;

        RealTypeRowsResponseModel rest = await _documents_grids_design_refit_service.SetToggleDeleteGridAsync(current_grid.Id);
        ModalBodyText = rest.Message;
        Modal.Open(rest.IsSuccess ? "Сохранено" : "Ошибка!");
        if (rest.IsSuccess)
        {
            Grids = rest.Rows;
        }
    }

    async Task HandleRemoveAsync()
    {
        if (current_grid.Id <= 0)
            return;

        RealTypeRowsResponseModel rest = await _documents_grids_design_refit_service.RemoveGridAsync(current_grid.Id);
        ModalBodyText = rest.Message;
        Modal.Open(rest.IsSuccess ? "Сохранено" : "Ошибка!");
        if (rest.IsSuccess)
        {
            Grids = rest.Rows;
            current_grid = Grids.FirstOrDefault() ?? new();
            _control_current_grid = new()
                {
                    Id = current_grid.Id,
                    Description = current_grid.Description,
                    IsDeleted = current_grid.IsDeleted,
                    Name = current_grid.Name,
                    SystemCodeName = current_grid.SystemCodeName
                };
        }
    }

    async Task HandleValidSaveAsync()
    {
        if (Id <= 0)
            return;

        current_grid.SystemCodeName = current_grid.SystemCodeName.Trim();
        current_grid.Name = current_grid.Name.Trim();

        RealTypeRowsResponseModel rest = await _documents_grids_design_refit_service.UpdateGridAsync(current_grid);
        ModalBodyText = rest.Message;
        Modal.Open(rest.IsSuccess ? "Сохранено" : "Ошибка!");
        if (rest.IsSuccess)
        {
            Grids = rest.Rows;
            current_grid = Grids.FirstOrDefault(x => x.SystemCodeName == current_grid.SystemCodeName);
            _control_current_grid = new()
                {
                    Id = current_grid.Id,
                    Description = current_grid.Description,
                    IsDeleted = current_grid.IsDeleted,
                    Name = current_grid.Name,
                    SystemCodeName = current_grid.SystemCodeName
                };
        }
    }

    async Task HandleValidSubmitCreateGridAsync()
    {
        if (Id <= 0)
            return;

        create_grid.SystemCodeName = create_grid.SystemCodeName.Trim();
        create_grid.Name = create_grid.Name.Trim();

        RealTypeRowsResponseModel rest = await _documents_grids_design_refit_service.AddGridAsync(create_grid);
        ModalBodyText = rest.Message;
        Modal.Open(rest.IsSuccess ? "Сохранено" : "Ошибка!");
        if (rest.IsSuccess)
        {
            Grids = rest.Rows;
            current_grid = Grids.FirstOrDefault(x => x.SystemCodeName == create_grid.SystemCodeName);
            _control_current_grid = new()
                {
                    Id = current_grid.Id,
                    Description = current_grid.Description,
                    IsDeleted = current_grid.IsDeleted,
                    Name = current_grid.Name,
                    SystemCodeName = current_grid.SystemCodeName
                };
            create_grid.Name = string.Empty;
            create_grid.SystemCodeName = string.Empty;
        }
    }

    async Task ReloadForm(int id)
    {
        if (id <= 0)
        {
            ModalBodyText = "Идентификатор документа не может быть 0";
            _logger.LogError(ModalBodyText);
            Modal.Open("Ошибка!");
            return;
        }

        IsBusyProgress = true;

        RealTypeRowsResponseModel rest = await _documents_grids_design_refit_service.GetGridsAsync(id);
        if (!rest.IsSuccess)
        {
            if (!string.IsNullOrEmpty(rest.Message))
            {
                _logger.LogError(rest.Message);
                ModalBodyText = rest.Message;
                Modal.Open("Ошибка!");
            }
            else
            {
                ModalBodyText = $"Ошибка API: {nameof(_documents_grids_design_refit_service.GetGridsAsync)}";
                _logger.LogError(ModalBodyText);
                Modal.Open("Ошибка!");
            }
        }
        else
        {
            Grids = rest.Rows;
            current_grid = Grids.FirstOrDefault() ?? new();
            _control_current_grid = new()
                {
                    Id = current_grid.Id,
                    Description = current_grid.Description,
                    IsDeleted = current_grid.IsDeleted,
                    Name = current_grid.Name,
                    SystemCodeName = current_grid.SystemCodeName
                };

            create_grid.OwnerId = id;
        }

        IsBusyProgress = false;
        StateHasChanged();
    }
}