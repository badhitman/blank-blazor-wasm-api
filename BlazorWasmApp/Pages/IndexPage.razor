@page "/"
@using BlazorWasmApp.Shared

<PageTitle>Index</PageTitle>

<h3>
    Инструмент создания/описания бизнес-моделей через WEB интерфейс.
</h3>
<hr />
<h4>Обратная связь<small class="text-muted"> - <a href="mailto:info@iq-s.pro">info@iq-s.pro</a></small></h4>
<br />
<div class="alert alert-primary" role="alert">
    <ul class="list-group list-group-flush">
        <li class="list-group-item">
            Решение состоит из двух веток: "constructor" и "main". Ветка "constructor" опубликована: <a href="https://iq-s.pro">https://iq-s.pro</a>
        </li>
        <li class="list-group-item">
            Базовая ветка "main" включает в себя только авторизацию. Эта ветка заточена под интеграцию в неё "комплекта кода" из "конструктора".
        </li>
        <li class="list-group-item">
            "Конструктор" позволяет описать структуру/модели базы данных информацинной системы через web-интерфейс. Над конструированием могут работать сразу несколько человек. В "конструкторе" не потребуется программировать. Программист должен будет наблюдать и, вероятно, корректировать то что создадут простые пользователи, но в принципе с "конструктором" справится любой (аналитик или простой пользователь).
        </li>
        <li class="list-group-item">
            В конструкторе создаются/описываются перечисления и сложные объекты (документы) с произвольной структурой полей/свойств. Поля/свойства документов могут иметь произвольный тип: число, строка, дата/время, перечисление или ссылка на другой документ.
        </li>
        <li class="list-group-item">
            В документе помимо простых полей/свойств могут быть и табличные части.
            Простое поле это значение (строка, число, булево, дата/время) или ссылка на сущность (перечисление или другой документ). Связь "один к одному".
            Табличная часть - это коллекции ссылок на другие (подчинённые) документы. Описываются отдельные документы, которые связаны к вашим документом и имеют связь "один ко многим".
        </li>
        <li class="list-group-item">
            Готовую информационную систему можно выгрузить как контекст базы данных с набором всех моделей и служб для интеграции в "main".
            Использовать готовые службы совсем не обязательно. Результат конструирования можно использовать как источник контекста базы данных.
            В этом смысле конечная информационная система может быть ни как ни связана с .NET/C#.
            Вполне воозможно, когда конструктор будет использоваться только как конструктор базы данны для Entity Framework (Code First). С такой базой данных можно работать не касаясь .NET, но имея в своём распоряжении возможности простого конструирования схемы БД и EF миграций.
        </li>
        <li class="list-group-item">
            Контструктор кроме непосредственного контекста базы данных сгенерирует для созданных моделей наборы служб работы с данными (crud). Есть наборы служб (и контроллеров) для бэка, а так же комплект refit служб для размещения на клиенте. После полной интеграции в "main" останется сделать Blazor UI и уже на этом этапе иметь частично готовую информационную систему. Готовой в значительной части готовности такой продукт назвать нельзя, но вместе с тем большой объём рутинной работы выполнять не прийдётся.
        </li>
    </ul>
</div>
<br />
<p>
    Ролик на YouTube: описание сборки проекта из консструктора в конечную программу.
</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/mYbymhW5Yjo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>